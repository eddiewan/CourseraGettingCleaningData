abline(model, col ='red')
plot(data$score~data$hours, pch = 16, cex =1.2, col = 'black', main = "Exam score versus hours spent", xlim = c(1,20), ylim = c(1,15), xlab = "hours", ylab = "score")
plot(data$score~data$hours, pch = 16, cex =1.2, col = 'black', main = "Exam score versus hours spent", xlim = c(1,20), ylim = c(1,15), xlab = "hours", ylab = "score")
model = lm(score~hours)
abline(model, col ='red')
abline(v=c(15))
abline(h=c(predict(model, newdata =data.frame(hours = 15))[[1]]))
model
summary(model)
install.packages("gvlma")
install.packages("lawstat")
install.packages("car")
library(gvlma)
library(ggplot2)
library(lawstat)
library(car)
library(boot)
set.seed(10)
##Read data
data = read.csv("C://Users//ewanner//Documents//09. Training//data//stat_exam.csv")
data <- data.frame(data)
colnames(data) <- c("math_test", "eng_test", "eng_gpa", "math_gpa", "other_gpa","statexam", "eng_grade", "math_grade", "other_grade")
##Pearson correlation matrix
round(cor(data, method = "pearson"),2)
##Show relationship between variables
plot(data)
#show histograms of variables
par(mfrow=c(3,3))
for (i in 1:ncol(data)) {
hist(data[,i], main = colnames(data)[i])
}
#create model
model <- lm(data$statexam ~ data$math_test + data$eng_test)#  + data$other_grade)
gvlma(model)
#assumption linearity, normality, homoscedasticity
par(mfrow=c(2,2))
plot(model)
data$stat_geslaagd <- ifelse(data$statexam >= 50,1,0)
total <- c(1:length(data[,1]))
train <- sample(total,(length(data[,1])*0.6), replace = FALSE)
validate <- sample(total[-train],(length(data[,1])*0.2), replace = FALSE)
test <- sample(total[-c(train, validate)],(length(data[,1])*0.2), replace = FALSE)
train_data <- data[train,]
validate_data <- data[validate,]
test_data <- data[test,]
model_1 <- lm(statexam~mathtest+engtest, data = train_data)
model_1 <- lm(statexam~math_test+eng_test, data = train_data)
summary(model_1)
available.packages()
a <- available.packages()
head(rownames(a),3)
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("gvlma")
install.packages("lawstat")
install.packages("car")
library(gvlma)
library(ggplot2)
library(lawstat)
library(car)
library(boot)
set.seed(10)
##Read data
data = read.csv("C://Users//ewanner//Documents//09. Training//data//stat_exam.csv")
data <- data.frame(data)
colnames(data) <- c("math_test", "eng_test", "eng_gpa", "math_gpa", "other_gpa","statexam", "eng_grade", "math_grade", "other_grade")
##Pearson correlation matrix
round(cor(data, method = "pearson"),2)
##Show relationship between variables
plot(data)
#show histograms of variables
par(mfrow=c(3,3))
for (i in 1:ncol(data)) {
hist(data[,i], main = colnames(data)[i])
}
#create model
model <- lm(data$statexam ~ data$math_test + data$eng_test)#  + data$other_grade)
?glm
model <- glm(statexam ~ mathtest+engtest, data = stat_exam)
##Read data
data = read.csv("C://Users//ewanner//Documents//09. Training//data//stat_exam.csv")
data <- data.frame(data)
colnames(data) <- c("math_test", "eng_test", "eng_gpa", "math_gpa", "other_gpa","statexam", "eng_grade", "math_grade", "other_grade")
##Pearson correlation matrix
round(cor(data, method = "pearson"),2)
data
model <- glm(statexam ~ mathtest+engtest, data = data)
colnames(data)
model <- glm(statexam ~ math_test+eng_test, data = data)
model
summary(model)
colnames(data)
data$statexam
floor(data$statexam/50)
statexam_pass <- floor(data$statexam/50)
data <- cbind(data,statexam_pass)
head(data)
model <- glm(statexam_pass ~ math_test+eng_test, data = data, family = 'binomial')
model
summary(model)
model <- glm(statexam_pass ~ math_test+eng_test, data = data, family = 'binomial')
model <-
glm(statexam_pass ~ math_test+eng_test, data = data, family = 'binomial')
glm(statexam_pass ~ math_test+eng_test, data = data, family = 'binomial')
model <-
glm(statexam_pass ~ math_test+eng_test, data = data, family = 'binomial(logit)')
glm(statexam_pass ~ math_test+eng_test, data = data, family = binomial('logit'))
### Question 2
install.packages("sqldf")
library(sqldf)
url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url, destfile = "acs.csv")
acs <- data.table(read.csv("acs.csv"))
library(data.table)
acs <- data.table(read.csv("acs.csv"))
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1 from acs")
sqldf("select * from acs where AGEP < 50")
### QUESTION 3
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
### QUESTION 4
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(url)
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[c(10,20,30,100)]
nchar(htmlCode[c(10,20,30,100)])
lines <- readLines(url, n = 10)
lines
lines <- readLines(url, n = 20)
lines
lines <- readLines(url, n = 200)
lines
?read.fwf
### QUESTION 5
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
lines
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
head(d)
sum(d$sstNino12)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
sum(d$sstNino3)
?grep
##### INITIALIZING #####
##load libraries
library(dplyr)
urlZip          <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileZip         <- "UCI HAR Dataset.zip"
##### INITIALIZING #####
##load libraries
library(dplyr)
urlZip          <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileZip         <- "UCI HAR Dataset.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- "UCI HAR Dataset"
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
getwd()
##### STEP 2 READ DATA #####
## read training data
trainSubjects           <- read.table(paste0(dataFolder, "/train/", "subject_train.txt"), header = FALSE)
trainFeatureValues      <- read.table(paste0(dataFolder, "/train/", "X_train.txt"), header = FALSE)
trainTarget             <- read.table(paste0(dataFolder, "/train/", "y_train.txt"), header = FALSE)
## read test data
testSubjects            <- read.table(paste0(dataFolder, "/test/", "subject_test.txt"), header = FALSE)
testFeatureValues       <- read.table(paste0(dataFolder, "/test/", "X_test.txt"), header = FALSE)
testTarget              <- read.table(paste0(dataFolder, "/test/", "y_test.txt"), header = FALSE)
##### STEP 3 MERGE TRAIN AND TEST DATA SET #####
dataSubjects            <- rbind(trainSubjects, testSubjects)
dataFeatureValues       <- rbind(trainFeatureValues, testFeatureValues)
dataTarget              <- rbind(trainTarget, testTarget)
head(dataSubjects)
head(dataFeatureValues)
View(trainTarget)
View(trainSubjects)
View(trainFeatureValues)
names(dataSubjects) <- "subject"
names(dataTarget) <- "activity"
View(dataSubjects)
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
features
colnames(features)      <- c("featureId","featureLabel")
features[,2]            <- as.character(features[,2])
## assign feature labels to the feature values table
names(dataFeatureValues) <- features[,2]
head(dataFeatureValues)
urlZip          <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileZip         <- "UCI HAR Dataset.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- "UCI HAR Dataset"
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
getwd()
getwd()
setwd("/03. Learning")
setwd("C:/Users/ewanner/Documents/03. Learning")
setwd("C:/Users/ewanner/Documents/GitHub/CourseraGettingCleaningData/")
##### INITIALIZING #####
##load libraries
library(dplyr)
urlZip          <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileZip         <- "UCI HAR Dataset.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- "UCI HAR Dataset"
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
##### STEP 2 READ DATA #####
## read training data
trainSubjects           <- read.table(paste0(dataFolder, "/train/", "subject_train.txt"), header = FALSE)
trainFeatureValues      <- read.table(paste0(dataFolder, "/train/", "X_train.txt"), header = FALSE)
trainTarget             <- read.table(paste0(dataFolder, "/train/", "y_train.txt"), header = FALSE)
## read test data
testSubjects            <- read.table(paste0(dataFolder, "/test/", "subject_test.txt"), header = FALSE)
testFeatureValues       <- read.table(paste0(dataFolder, "/test/", "X_test.txt"), header = FALSE)
testTarget              <- read.table(paste0(dataFolder, "/test/", "y_test.txt"), header = FALSE)
##### STEP 3 MERGE TRAIN AND TEST DATA SET #####
dataSubjects            <- rbind(trainSubjects, testSubjects)
dataFeatureValues       <- rbind(trainFeatureValues, testFeatureValues)
dataTarget              <- rbind(trainTarget, testTarget)
## Assign names to the tables subject and Target
names(dataSubjects) <- "subject"
names(dataTarget) <- "activity"
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
## Assign names to the tables subject and Target
names(dataSubjects) <- "subject"
names(dataTarget) <- "activity"
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
colnames(features)      <- c("featureId","featureLabel")
features[,2]            <- as.character(features[,2])
## assign feature labels to the feature values table
names(dataFeatureValues) <- features[,2]
## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
head(dataset)
#only keep features that have 'mean' or 'std' in their name.
#remove
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
selectedNames
?grep
dataset <- subset(dataset, selected = selectedNames)
head(dataset)
## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
#only keep features that have 'mean' or 'std' in their name.
#remove
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset <- subset(dataset, selected = selectedNames)
?subset
head(subset(dataset, selected = selectedNames))
head(dataset[selectedNames])
dataset_subset <- dataset[selectedNames,]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
activities
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
activities
dataset_subset
head(dataset_subset)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset_subset <- dataset[selectedNames,]
dataset_subset
dataset_subset <- dataset[,selectedNames]
head(dataset_subset)
activities[match[dataset_subset[,"activity"], activities$activityId],2,drop=F]
activities[match[dataset_subset[,"activity"], activities$activityId],2]
head(dataset_subset[,"activity"])
temp <- head(dataset_subset[,"activity"])
activities[match[temp,activities$activityId],2]
activities[match[temp,activities[1],2]
]
activities[match[temp,activities[1]],2]
activities[match[temp,activities[,1]],2]
activities[match[temp,activities[,1]],2, drop = F]
typeof(activities)
typeof(activities[,1])
?list2df
temp <- stack(lapply(activities, paste0, collapse = " "))
data.frame(pos=rownames(temp), word=temp, row.names = NULL)
temp <- do.call(lapply(activities, paste0, collapse = " "))
data.frame(pos=rownames(temp), word=temp, row.names = NULL)
temp <- do.call(rbind,lapply(activities, paste0, collapse = " "))
data.frame(pos=rownames(temp), word=temp, row.names = NULL)
?merge
temp <- head(dataset_subset)
temp <- head(dataset_subset[,"activity"])
temp
merge(temp,activities, by=activities[,2])
merge(temp,activities, by.y=activities[,2])
merge(temp,activities, by.x=activities[,2])
merge(temp,activities)
merge(temp,activities, by.x)
merge(temp,activities, by.x=by)
temp1 <- head(dataset_subset[,"activity"])
merge(temp1,activities, by.x=by)
typeof(dataset_subset)
typeof(activities)
typeof(dataset_subset[,"activity"])
as.data.frame(temp)
activity_test <- as.data.frame(activities)
dataset_test <- as.data.frame(dataset_subset)
head(merge(dataset_test, activity_test, by.x = dataset_test$activity, by.y = activity_test$activityId))
## Assign names to the tables subject and Target
names(dataSubjects) <- "subjectId"
names(dataTarget) <- "activityId"
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
colnames(features)      <- c("featureId","featureLabel")
features[,2]            <- as.character(features[,2])
## assign feature labels to the feature values table
names(dataFeatureValues) <- features[,2]
## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset_subset <- dataset[,selectedNames]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
activity_test <- as.data.frame(activities)
dataset_test <- as.data.frame(dataset_subset)
head(merge(dataset_test, activity_test, by.x = dataset_test$activity, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by.x = dataset_test$activity))
head(merge(dataset_test, activity_test))
##### INITIALIZING #####
##load libraries
library(dplyr)
urlZip          <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileZip         <- "UCI HAR Dataset.zip"
if(!file.exists(fileZip)) {
download.file(urlZip, fileZip, mode = "wb")
}
dataFolder <- "UCI HAR Dataset"
if(!file.exists(dataFolder)) {
unzip(fileZip)
}
##### STEP 2 READ DATA #####
## read training data
trainSubjects           <- read.table(paste0(dataFolder, "/train/", "subject_train.txt"), header = FALSE)
trainFeatureValues      <- read.table(paste0(dataFolder, "/train/", "X_train.txt"), header = FALSE)
trainTarget             <- read.table(paste0(dataFolder, "/train/", "y_train.txt"), header = FALSE)
## read test data
testSubjects            <- read.table(paste0(dataFolder, "/test/", "subject_test.txt"), header = FALSE)
testFeatureValues       <- read.table(paste0(dataFolder, "/test/", "X_test.txt"), header = FALSE)
testTarget              <- read.table(paste0(dataFolder, "/test/", "y_test.txt"), header = FALSE)
##### STEP 3 MERGE TRAIN AND TEST DATA SET #####
dataSubjects            <- rbind(trainSubjects, testSubjects)
dataFeatureValues       <- rbind(trainFeatureValues, testFeatureValues)
dataTarget              <- rbind(trainTarget, testTarget)
## Assign names to the tables subject and Target
names(dataSubjects) <- "subjectId"
names(dataTarget) <- "activityId"
## read feature labels
features                <- read.table(paste0(dataFolder, "/features.txt"), as.is = TRUE)
colnames(features)      <- c("featureId","featureLabel")
features[,2]            <- as.character(features[,2])
## assign feature labels to the feature values table
names(dataFeatureValues) <- features[,2]
## create one dataset
dataset <- cbind(dataFeatureValues,dataSubjects, dataTarget)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subject", "activity")
dataset_subset <- dataset[,selectedNames]
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c(features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2], "subjectId", "activityId")
dataset_subset <- dataset[,selectedNames]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
activity_test <- as.data.frame(activities)
dataset_test <- as.data.frame(dataset_subset)
head(merge(dataset_test, activity_test))
activities
activity_test
dataset_test
head(merge(dataset_test, activity_test, by.x = dataset_test$activityId, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by.x = dataset_test$activityId))#, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by = "activityId"))#, by.y = activity_test$activityId))
activity_test <- head(as.data.frame(activities))
dataset_test <- head(as.data.frame(dataset_subset))
head(merge(dataset_test, activity_test, by = "activityId"))#, by.y = activity_test$activityId))
dataset_test
dataset_test$activityId
activity_test
activity_test <- head(as.data.frame(activities),20)
dataset_test <- head(as.data.frame(dataset_subset),20)
head(merge(dataset_test, activity_test, by = "activityId"))#, by.y = activity_test$activityId))
head(merge(dataset_test, activity_test, by = "activityId"),20)#, by.y = activity_test$activityId))
head(dataset_subset$activityId)
head(dataset_subset$activityId,100)
activity_test <- head(as.data.frame(activities),100)
dataset_test <- head(as.data.frame(dataset_subset),100)
head(merge(dataset_test, activity_test, by = "activityId"),100)#, by.y = activity_test$activityId))
result <- merge(dataset_test, activity_test, by = "activityId")
activity_test <- head(as.data.frame(activities),100)
dataset_test <- head(as.data.frame(dataset_subset),100)
result <- merge(dataset_test, activity_test, by = "activityId")
result$activityId
result$activityLabel
cbind(result$activityId,result$activityLabel)
#convert to dataframe in order to merge lists
activities_df           <- as.data.frame(activities)
dataset_subset_df       <- as.data.frame(dataset_subset)
merged_df <- merge(dataset_test, activity_test, by = "activityId")
View(merged_df)
#only keep features that have 'mean' or 'std' in their name.
#features with mean or std in combination with 'FREQ' in their name are not included
#select features
selectedNames <- c("subjectId", "activityId", features[grep("mean\\(\\)|std\\(\\)", features[,2] ),2])
dataset_subset <- dataset[,selectedNames]
## read acitivity labels
activities              <- read.table(paste0(dataFolder, "/activity_labels.txt"), header = FALSE)
colnames(activities)    <- c("activityId", "activityLabel")
activities[,2]          <- as.character(activities[,2])
#convert to dataframe in order to merge lists
activities_df           <- as.data.frame(activities)
dataset_subset_df       <- as.data.frame(dataset_subset)
#change labels of the table to retrieve descriptive labels.
merged_df <- merge(dataset_test, activity_test, by = "activityId")
View(merged_df)
#change labels of the table to retrieve descriptive labels.
merged_df <- merge(dataset_subset_df, activities_df, by = "activityId")
head(merged_df)
result <- merge(activity_test, dataset_test , by = "activityId")
?gsub
merged_df.Names
names(merged_df)
names(merged_df) <- gsub('-mean', 'Mean', names(merged_df))
names(merged_df)
names(merged_df) <- gsub('-mean', 'Mean', names(merged_df))
names(merged_df) <- gsub('-std', 'StandardDeviation', names(merged_df))
names(merged_df)
names(merged_df) <- gsub('[-()]', '', names(merged_df))
names(merged_df)
#change labels of the table to retrieve descriptive labels.
merged_df <- merge(dataset_subset_df, activities_df, by = "activityId")
names(merged_df) <- gsub('-mean', 'Mean', names(merged_df))
names(merged_df) <- gsub('-std', 'StandardDeviation', names(merged_df))
names(merged_df) <- gsub('[()]', '', names(merged_df))
names(merged_df)
names(merged_df) <- gsub('[-()]', '', names(merged_df))
names(merged_df)
c(names(merged_df))
names(merged_df)[-c("subjectId", "activityLabel")]
names(merged_df)[,-c("subjectId", "activityLabel")]
feature_names <- names(merged_df)
feature_names[-c("subjectId", "activityLabel")]
feature_names
feature_names[,-c("subjectId", "activityLabel")]
feature_names[c("subjectId", "activityLabel")]
feature_names["subjectId"]
feature_names[1]
subset(feature_names, select = -c("subjectId"))
feature_names <- names(merged_df)
subset(feature_names, select = -c("subjectId"))
select(feature_names, subjectId)
select(feature_names, "subjectId")
select(merged_df, "subjectId")
feature_names[feature_names %in% "subjectId"]
feature_names[feature_names %not in% "subjectId"]
feature_names[!feature_names %in% "subjectId"]
feature_names[!feature_names %in% c("subjectId", "activityLabel")]
feature_names <- names(merged_df)
first_features <- c("subjectId", "activityLabel")
remaining_features <- feature_names[!(feature_names %in% C(first_features,"activityId"))]
remaining_features <- feature_names[!(feature_names %in% c(first_features,"activityId"))]
remaining_features
cleaned_dataset <- merged_df[c(first_features, remaining_features)]
names(cleaned_dataset)
head(cleaned_dataset)
test <- head(cleaned_dataset)
test
aggregate(.~subjectID+activityLabel, test, mean)
aggregate(.~subjectId+activityLabel, test, mean)
mean_cleaned_dataset <- aggregate(.~subjectId+activityLabel, cleaned_dataset, mean)
head(mean_cleaned_dataset)
View(mean_cleaned_dataset)
write.table(mean_cleaned_dataset,row.names = F)
?write.table
write.table(mean_cleaned_dataset, file = '20190924_mean_cleaned_dataset.txt',row.names = F)
